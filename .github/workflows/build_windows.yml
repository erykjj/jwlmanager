name: 'Build Windows v1.4.0'

on:
  workflow_call:
    inputs:
      TAG:
        default: 'testing'
        required: true
        type: string
  workflow_dispatch:
    inputs:
      TAG:
        default: 'testing'
        required: true
        type: string

jobs:
  windows:
    name: Build Windows-amd64 EXE & ZIP
    runs-on: windows-latest
    permissions:
      contents: read
      actions: write
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Set up Python
        uses: actions/setup-python@v6
        with:
          python-version: '3.13'

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: C:\Users\runneradmin\AppData\Local\pip\Cache
          key: ${{ runner.os }}-pip-${{ hashFiles('res/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Cache Nuitka
        uses: actions/cache@v4
        with:
          path: C:\Users\runneradmin\.nuitka_cache
          key: ${{ runner.os }}-nuitka-${{ hashFiles('res/requirements*.txt', 'JWLManager.py') }}
          restore-keys: |
            ${{ runner.os }}-nuitka-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install --upgrade -r res/requirements.txt
          python -m pip install nuitka
          Copy-Item -Path libs\jwlCore-amd64.dll -Destination . -Force
          Copy-Item -Path libs\sqlite3_64.dll -Destination . -Force

      - name: Build onefile EXE
        run: |
          python -m nuitka --onefile --windows-icon-from-ico=res/icons/JWLManager.ico --include-data-dir=res=res --windows-console-mode=disable --user-package-configuration-file=.github/workflows/jwlCore.config --include-module=xlsx2csv --include-package-data=puremagic --enable-plugin=pyside6 --assume-yes-for-downloads JWLManager.py
          New-Item -ItemType Directory -Force -Path dist
          Move-Item JWLManager.exe dist/JWLManager_${{ inputs.TAG }}-amd64.exe

      - name: Build ZIP
        run: |
          python -m nuitka --standalone --windows-icon-from-ico=res/icons/JWLManager.ico --include-data-dir=res=res --windows-console-mode=disable --user-package-configuration-file=.github/workflows/jwlCore.config --include-module=xlsx2csv --include-package-data=puremagic --enable-plugin=pyside6 --assume-yes-for-downloads JWLManager.py
          New-Item -ItemType Directory -Force -Path dist
          Remove-Item -Recurse -Force JWLManager -ErrorAction SilentlyContinue
          New-Item -ItemType Directory -Path JWLManager
          xcopy /E /I JWLManager.dist\* JWLManager\
          tar.exe -a -c -f dist/JWLManager_${{ inputs.TAG }}-amd64.zip JWLManager

      - name: Upload EXE
        uses: actions/upload-artifact@v4
        with:
          name: WindowsEXE
          path: dist/JWLManager_${{ inputs.TAG }}-amd64.exe

      - name: Upload ZIP
        uses: actions/upload-artifact@v4
        with:
          name: WindowsZIP
          path: dist/JWLManager_${{ inputs.TAG }}-amd64.zip

  winarm:
    name: Build Windows-arm64 EXE & ZIP
    runs-on: windows-latest
    permissions:
      contents: read
      actions: write
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Set up Python
        uses: actions/setup-python@v6
        with:
          python-version: '3.13'

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: C:\Users\runneradmin\AppData\Local\pip\Cache
          key: ${{ runner.os }}-pip-${{ hashFiles('res/requirements-winarm.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Cache Nuitka
        uses: actions/cache@v4
        with:
          path: C:\Users\runneradmin\.nuitka_cache
          key: ${{ runner.os }}-nuitka-arm-${{ hashFiles('res/requirements-winarm.txt', 'JWLManager.py') }}
          restore-keys: |
            ${{ runner.os }}-nuitka-arm-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install --upgrade -r res/requirements-winarm.txt
          python -m pip install nuitka
          Copy-Item -Path libs\jwlCore-amd64.dll -Destination . -Force
          Copy-Item -Path libs\sqlite3_64.dll -Destination . -Force

      - name: Build onefile EXE
        run: |
          python -m nuitka --onefile --windows-icon-from-ico=res/icons/JWLManager.ico --include-data-dir=res=res --windows-console-mode=disable --user-package-configuration-file=.github/workflows/jwlCore.config --include-module=xlsx2csv --include-package-data=puremagic --enable-plugin=pyside6 --assume-yes-for-downloads JWLManager.py
          New-Item -ItemType Directory -Force -Path dist
          Move-Item JWLManager.exe dist/JWLManager_${{ inputs.TAG }}-arm64.exe

      - name: Build ZIP
        run: |
          python -m nuitka --standalone --windows-icon-from-ico=res/icons/JWLManager.ico --include-data-dir=res=res --windows-console-mode=disable --user-package-configuration-file=.github/workflows/jwlCore.config --include-module=xlsx2csv --include-package-data=puremagic --enable-plugin=pyside6 --assume-yes-for-downloads JWLManager.py
          New-Item -ItemType Directory -Force -Path dist
          Remove-Item -Recurse -Force JWLManager -ErrorAction SilentlyContinue
          New-Item -ItemType Directory -Path JWLManager
          xcopy /E /I JWLManager.dist\* JWLManager\
          tar.exe -a -c -f dist/JWLManager_${{ inputs.TAG }}-arm64.zip JWLManager

      - name: Upload EXE
        uses: actions/upload-artifact@v4
        with:
          name: WinarmEXE
          path: dist/JWLManager_${{ inputs.TAG }}-arm64.exe

      - name: Upload ZIP
        uses: actions/upload-artifact@v4
        with:
          name: WinarmZIP
          path: dist/JWLManager_${{ inputs.TAG }}-arm64.zip
