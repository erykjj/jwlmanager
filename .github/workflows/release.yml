name: 'Draft Release v1.2.0'

on:
  push:
    tags:
      - 'v*'

jobs:
  linux:
    uses: ./.github/workflows/build_lin.yml
    with:
      TAG:  ${{ github.ref_name }}
  windows:
    uses: ./.github/workflows/build_win.yml
    with:
      TAG:  ${{ github.ref_name }}
  winarm:
    uses: ./.github/workflows/build_win-arm.yml
    with:
      TAG:  ${{ github.ref_name }}
  macos:
    uses: ./.github/workflows/build_mac.yml
    with:
      TAG:  ${{ github.ref_name }}
  macold:
    uses: ./.github/workflows/build_mac-old.yml
    with:
      TAG:  ${{ github.ref_name }}
  release:
    name: Create Release Draft
    needs: [linux, windows, winarm, macos, macold]
    runs-on: ubuntu-latest
    permissions:
      contents: write
      actions: read
    outputs:
      changelog-section: ${{ steps.extract.outputs.changelog_section }}
    env:
      TAG: ${{ github.ref_name }}
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    - name: Download Linux binary
      uses: actions/download-artifact@v4
      with:
        name: LinuxBIN
    - name: Download Windows executable
      uses: actions/download-artifact@v4
      with:
        name: WindowsEXE
    - name: Download Windows zipped folder
      uses: actions/download-artifact@v4
      with:
        name: WindowsZIP
    - name: Download Windows-arm executable
      uses: actions/download-artifact@v4
      with:
        name: WinarmEXE
    - name: Download Windows-arm zipped folder
      uses: actions/download-artifact@v4
      with:
        name: WinarmZIP
    - name: Download macOS app
      uses: actions/download-artifact@v4
      with:
        name: MacAPP
    - name: Download macOS-old app
      uses: actions/download-artifact@v4
      with:
        name: MacAPP-old
    - name: Extract section from changelog
      id: extract
      env:
        CHANGELOG_FILE: "CHANGELOG.md"
      run: |
        if [[ ! -f "$CHANGELOG_FILE" ]]; then
          echo "Error: File '$CHANGELOG_FILE' not found!"
          exit 1
        fi
        changelog_section=$(awk '
        /^## / { h2_count++ } 
        h2_count == 2 && !/^## / && !/^$/ { in_section = 1 } 
        h2_count == 3 { in_section = 0 } 
        in_section { 
            if (/^[[:space:]]*$/) { 
                empty_buffer = empty_buffer $0 "\n" 
            } else { 
                printf "%s", empty_buffer 
                empty_buffer = "" 
                print 
            } 
        }
        ' "$CHANGELOG_FILE")
        echo "changelog_section<<EOF" >> $GITHUB_OUTPUT
        echo "$changelog_section" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT
    - name: Create release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: ${{ github.ref_name }}
        name: ${{ github.ref_name }}
        draft: true
        prerelease: false
        body: |
          ${{ steps.extract.outputs.changelog_section }}
          ____
          You can clone the repo or download the source script and execute it from the commandline, or use these self-contained packages, which don't require the installation of Python or any dependencies:
          - Linux:
            - Stand-alone: [JWLManager_${{ github.ref_name }}](https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/JWLManager_${{ github.ref_name }})
          - Windows 10/11:
            - Stand-alone: [JWLManager_${{ github.ref_name }}.exe](https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/JWLManager_${{ github.ref_name }}.exe)
            - Zipped folder: [JWLManager_${{ github.ref_name }}.zip](https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/JWLManager_${{ github.ref_name }}.zip)
          - Windows 10/11 (ARM):
            - Stand-alone: [JWLManager_${{ github.ref_name }}-arm.exe](https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/JWLManager_${{ github.ref_name }}-arm.exe)
            - Zipped folder: [JWLManager_${{ github.ref_name }}-arm.zip](https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/JWLManager_${{ github.ref_name }}-arm.zip)
          - macOS:
            - 13/14: [JWLManager_${{ github.ref_name }}-macOS13.app.zip](https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/JWLManager_${{ github.ref_name }}-macOS13.app.zip)
            - 15: [JWLManager_${{ github.ref_name }}.app.zip](https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/JWLManager_${{ github.ref_name }}.app.zip)
        files: |
          JWLManager_${{ github.ref_name }}
          JWLManager_${{ github.ref_name }}.exe
          JWLManager_${{ github.ref_name }}.zip
          JWLManager_${{ github.ref_name }}-arm.exe
          JWLManager_${{ github.ref_name }}-arm.zip
          JWLManager_${{ github.ref_name }}.app.zip
          JWLManager_${{ github.ref_name }}-macOS13.app.zip
